@page "/register"

@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>Register</h3>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="email" class="required">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Email)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="user.Username" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Username)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="password" class="required">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => user.Password)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => user.ConfirmPassword)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="userrole">Role</label><br />
        <InputSelect id="userrole" @bind-Value="user.RoleId" class="form-select">
            @foreach (var role in UserService.Roles)
            {
                <option value="@role.Id">@role.Name</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="dateOfBirth">Data of Birth</label>
        <InputDate id="dateOfBirth" @bind-Value="user.DateOfBirth" class="form-control"></InputDate>
        <ValidationMessage For="@(() => user.DateOfBirth)"></ValidationMessage>
    </div>
    <div class="form-check">
        <InputCheckbox id="confirmed" @bind-Value="user.IsConfirmed" class="form-check-input"></InputCheckbox>
        <label for="confirmed" class="form-check-label">Confirmed</label>
        <ValidationMessage For="@(() => user.IsConfirmed)"></ValidationMessage>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    protected override async Task OnInitializedAsync()
    {
        await UserService.GetRoles();
    }

    UserRegister user = new UserRegister { Role = new Role() };

    protected async Task HandleRegistration()
    {
        await JSRuntime.InvokeVoidAsync("console.log", "This is the great new user:", user);

        User user_registered = new User { Role = new Role() };
        user_registered.Email = user.Email;
        user_registered.Username = user.Username;
        user_registered.Password = user.Password;
        user_registered.ConfirmPassword = user.ConfirmPassword;

        await UserService.CreatePasswordHash(user.Password);

        user_registered.PasswordHash = UserService.ByteArrayPair.PasswordHash;
        user_registered.PasswordSalt = UserService.ByteArrayPair.PasswordSalt;

        user_registered.RoleId = user.RoleId;
        user_registered.DateOfBirth = user.DateOfBirth;

        await UserService.CreateUser(user_registered);

        NavigationManager.NavigateTo("userpage");
    }
}
