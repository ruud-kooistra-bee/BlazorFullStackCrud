// <auto-generated />
using System;
using BlazorFullStackCrud.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorFullStackCrud.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220318135849_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlazorFullStackCrud.Shared.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("BlazorFullStackCrud.Shared.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2022, 3, 18, 14, 58, 49, 635, DateTimeKind.Local).AddTicks(1794),
                            Email = "user#domain.com",
                            PasswordHash = new byte[] { 5, 166, 104, 20, 180, 5, 185, 141, 65, 181, 152, 111, 204, 80, 185, 54, 223, 112, 104, 74, 192, 53, 162, 115, 13, 161, 150, 198, 160, 167, 11, 230, 99, 141, 71, 200, 124, 252, 162, 126, 4, 90, 93, 25, 111, 115, 169, 140, 179, 103, 201, 173, 116, 48, 91, 46, 175, 206, 137, 38, 121, 201, 189, 253 },
                            PasswordSalt = new byte[] { 232, 231, 109, 200, 172, 22, 161, 205, 218, 78, 178, 155, 151, 117, 145, 29, 56, 54, 184, 158, 186, 85, 79, 205, 246, 139, 189, 244, 50, 85, 129, 95, 25, 254, 177, 117, 119, 3, 53, 72, 226, 86, 139, 236, 223, 20, 242, 18, 172, 50, 69, 182, 130, 82, 211, 231, 150, 94, 63, 103, 232, 86, 79, 33, 3, 153, 95, 86, 131, 5, 24, 232, 199, 59, 223, 19, 130, 245, 14, 166, 219, 92, 220, 225, 48, 78, 242, 35, 30, 235, 240, 54, 244, 148, 104, 56, 209, 234, 94, 31, 250, 225, 224, 131, 246, 66, 184, 172, 15, 56, 171, 51, 133, 251, 224, 161, 205, 195, 114, 216, 74, 113, 9, 170, 188, 196, 45, 158 },
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2022, 3, 18, 14, 58, 49, 635, DateTimeKind.Local).AddTicks(1801),
                            Email = "user#domain.com",
                            PasswordHash = new byte[] { 5, 166, 104, 20, 180, 5, 185, 141, 65, 181, 152, 111, 204, 80, 185, 54, 223, 112, 104, 74, 192, 53, 162, 115, 13, 161, 150, 198, 160, 167, 11, 230, 99, 141, 71, 200, 124, 252, 162, 126, 4, 90, 93, 25, 111, 115, 169, 140, 179, 103, 201, 173, 116, 48, 91, 46, 175, 206, 137, 38, 121, 201, 189, 253 },
                            PasswordSalt = new byte[] { 232, 231, 109, 200, 172, 22, 161, 205, 218, 78, 178, 155, 151, 117, 145, 29, 56, 54, 184, 158, 186, 85, 79, 205, 246, 139, 189, 244, 50, 85, 129, 95, 25, 254, 177, 117, 119, 3, 53, 72, 226, 86, 139, 236, 223, 20, 242, 18, 172, 50, 69, 182, 130, 82, 211, 231, 150, 94, 63, 103, 232, 86, 79, 33, 3, 153, 95, 86, 131, 5, 24, 232, 199, 59, 223, 19, 130, 245, 14, 166, 219, 92, 220, 225, 48, 78, 242, 35, 30, 235, 240, 54, 244, 148, 104, 56, 209, 234, 94, 31, 250, 225, 224, 131, 246, 66, 184, 172, 15, 56, 171, 51, 133, 251, 224, 161, 205, 195, 114, 216, 74, 113, 9, 170, 188, 196, 45, 158 },
                            RoleId = 2,
                            Username = "user"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
