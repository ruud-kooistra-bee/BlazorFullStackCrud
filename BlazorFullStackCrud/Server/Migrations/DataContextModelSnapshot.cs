// <auto-generated />
using System;
using BlazorFullStackCrud.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorFullStackCrud.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlazorFullStackCrud.Shared.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("BlazorFullStackCrud.Shared.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConfirmPassword = "",
                            DateOfBirth = new DateTime(2022, 3, 17, 12, 21, 36, 422, DateTimeKind.Local).AddTicks(7692),
                            Email = "user#domain.com",
                            Password = "",
                            PasswordHash = new byte[] { 65, 70, 63, 95, 32, 45, 183, 69, 40, 237, 0, 68, 98, 145, 21, 183, 200, 31, 59, 22, 31, 210, 67, 183, 57, 64, 53, 202, 220, 208, 35, 0, 219, 217, 242, 61, 6, 202, 187, 187, 148, 23, 88, 48, 55, 217, 116, 77, 15, 240, 23, 205, 192, 161, 171, 131, 171, 74, 165, 232, 86, 131, 113, 248 },
                            PasswordSalt = new byte[] { 80, 11, 104, 212, 4, 219, 43, 208, 74, 176, 174, 188, 37, 74, 214, 223, 10, 98, 165, 243, 35, 247, 12, 210, 106, 47, 12, 115, 237, 14, 44, 157, 168, 39, 22, 200, 32, 181, 74, 168, 185, 167, 120, 12, 159, 185, 34, 230, 179, 157, 28, 220, 169, 100, 167, 41, 135, 232, 8, 166, 144, 69, 162, 54, 76, 231, 152, 62, 204, 135, 2, 178, 23, 72, 79, 228, 81, 39, 20, 81, 24, 58, 96, 210, 238, 96, 72, 233, 105, 236, 239, 49, 31, 128, 228, 147, 170, 108, 200, 84, 187, 45, 232, 214, 170, 134, 125, 248, 123, 2, 97, 200, 47, 212, 48, 100, 36, 94, 12, 73, 191, 185, 142, 130, 125, 79, 66, 92 },
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            ConfirmPassword = "",
                            DateOfBirth = new DateTime(2022, 3, 17, 12, 21, 36, 422, DateTimeKind.Local).AddTicks(7699),
                            Email = "user#domain.com",
                            Password = "",
                            PasswordHash = new byte[] { 65, 70, 63, 95, 32, 45, 183, 69, 40, 237, 0, 68, 98, 145, 21, 183, 200, 31, 59, 22, 31, 210, 67, 183, 57, 64, 53, 202, 220, 208, 35, 0, 219, 217, 242, 61, 6, 202, 187, 187, 148, 23, 88, 48, 55, 217, 116, 77, 15, 240, 23, 205, 192, 161, 171, 131, 171, 74, 165, 232, 86, 131, 113, 248 },
                            PasswordSalt = new byte[] { 80, 11, 104, 212, 4, 219, 43, 208, 74, 176, 174, 188, 37, 74, 214, 223, 10, 98, 165, 243, 35, 247, 12, 210, 106, 47, 12, 115, 237, 14, 44, 157, 168, 39, 22, 200, 32, 181, 74, 168, 185, 167, 120, 12, 159, 185, 34, 230, 179, 157, 28, 220, 169, 100, 167, 41, 135, 232, 8, 166, 144, 69, 162, 54, 76, 231, 152, 62, 204, 135, 2, 178, 23, 72, 79, 228, 81, 39, 20, 81, 24, 58, 96, 210, 238, 96, 72, 233, 105, 236, 239, 49, 31, 128, 228, 147, 170, 108, 200, 84, 187, 45, 232, 214, 170, 134, 125, 248, 123, 2, 97, 200, 47, 212, 48, 100, 36, 94, 12, 73, 191, 185, 142, 130, 125, 79, 66, 92 },
                            RoleId = 2,
                            Username = "user"
                        });
                });

            modelBuilder.Entity("BlazorFullStackCrud.Shared.User", b =>
                {
                    b.HasOne("BlazorFullStackCrud.Shared.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
